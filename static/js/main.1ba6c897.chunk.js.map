{"version":3,"sources":["Components/Card/card.component.jsx","Components/card-list/card-list.component.jsx","Components/SearchBox/SearchBox.components.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monstor","id","name","email","CardList","monstors","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonstors","filter","m","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAEaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAY,iBAAjB,UACI,qBACEC,IAAM,WACNC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEL,mCAAML,EAAMI,QAAQE,QACpB,4BAAIN,EAAMI,QAAQG,YCJbC,G,MAAW,SAAAR,GAAK,OACpB,qBAAKC,UAAW,YAAhB,SACMD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC3B,cAAC,EAAD,CAAwBA,QAASA,GAArBA,EAAQC,WCLrBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACjB,uBACAZ,UAAY,SACZa,KAAK,SACLF,YAAcA,EAEdG,SAAWF,MCwDJG,G,wDA1Db,aAAc,IAAD,8BACX,gBAgBFH,aAAe,SAAAI,GACZ,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAftC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALJ,E,qDASb,WAAoB,IAAD,OACjBI,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBAS1C,WAAQ,MAE0BC,KAAKN,MAA9Bb,EAFD,EAECA,SAAUU,EAFX,EAEWA,YACXU,EAAmBpB,EAASqB,QAAO,SAAAC,GAAC,OAAIA,EAAEzB,KAAK0B,cAAcC,SAASd,EAAYa,kBAE1F,OACE,sBAAK/B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWW,YAAc,iBACdC,aAAgBe,KAAKf,eAChC,cAAC,EAAD,CAAUJ,SAAYoB,W,GAhCVK,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1ba6c897.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css';\r\nexport const Card = props => (\r\n    <div className = 'card-container'> \r\n        <img \r\n          alt = 'monstors'\r\n          src={`https://robohash.org/${props.monstor.id}?set=set2&size=100x100`}\r\n        />\r\n        <h2> {props.monstor.name}</h2>\r\n        <p>{props.monstor.email}</p>\r\n    </div>\r\n\r\n)","import React from 'react';\r\n\r\nimport { Card } from '../Card/card.component';\r\nimport './card-list.style.css';\r\n\r\nexport const CardList = props => (\r\n         <div className= 'card-list'>\r\n              {props.monstors.map(monstor => (\r\n              <Card key= {monstor.id} monstor={monstor} />))} \r\n          </div>   \r\n);","import React from 'react';\r\nimport './SearchBox.style.css';\r\n\r\nexport const SearchBox = ({placeholder,handleChange}) => (\r\n        <input \r\n        className = 'search'\r\n        type='search' \r\n        placeholder= {placeholder} \r\n        //onChange= {e => this.setState({searchField: e.target.value})}\r\n        onChange= {handleChange}/>\r\n)\r\n\r\n\r\n","import React, { Component } from 'react';\nimport { CardList } from './Components/card-list/card-list.component';\nimport { SearchBox } from './Components/SearchBox/SearchBox.components';\n//import logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state = {\n      monstors: [],\n      searchField: ''\n    };\n  }\n// dynamically calling data from server link\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users') // fetching the link \n     .then(response => response.json())                 // taking the response and converting it into json format so tht js can understand\n    .then(users => this.setState({monstors: users})); // take user names and put it in mostors array\n   \n  }\n\n  //arrow function\n  handleChange = e => {\n     this.setState({searchField: e.target.value}); //the => arrow function automatically binds 'this' to the handleChange function without using this.handleChange.bind(this)\n  }\n\n  render(){\n  // destructoring \n    const {monstors, searchField} = this.state;    //duplicating original array coz we do not want to touch the original array\n    const filteredMonstors = monstors.filter(m => m.name.toLowerCase().includes(searchField.toLowerCase()));\n\n  return (\n    <div className=\"App\">\n      <h1>Monstors Rolodex</h1>\n      <SearchBox placeholder = 'Search Mosntor'\n                 handleChange = {this.handleChange}/>\n      <CardList monstors = {filteredMonstors}/>  \n    </div>\n  )\n  }\n\n}\n/* function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n           Hello\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}  */\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}